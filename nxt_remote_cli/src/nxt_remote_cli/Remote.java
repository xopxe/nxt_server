/*
 * NewJFrame.java
 *
 * Created on September 13, 2007, 11:24 PM
 */

package nxt_remote_cli;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ItemEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.JPanel;

/**
 *
 * @author  xopxe
 */
public class Remote extends javax.swing.JFrame implements MouseListener, MouseMotionListener {
    
    int x1=100;
    int y1=100;
    boolean dragging=false;
    int reverseRight = 1;
    int reverseLeft = 1;
    JPanel drawSurface;
    
    /** Creates new form NewJFrame */
    public Remote() {
        initComponents();
        
        drawSurface = new JPanel() {
            // This anonymous inner class defines the drawing
            // surface for the applet.
            public void paintComponent(Graphics g) {
                // Draw the two squares and a black frame
                // around the panel.
                super.paintComponent(g);  // Fill with background color.
                g.setColor(Color.red);
                g.fillRect(x1-10, y1-10, 20, 20);
            }
        };
        
        panelControl.add(drawSurface);
        drawSurface.setBounds(0, 0, 200, 200);
        //drawSurface.setBackground(Color.lightGray);
        drawSurface.addMouseListener(this);
        drawSurface.addMouseMotionListener(this);
        
        drawSurface.setOpaque(false);
        
        Sender.setServer("localhost" , 1234 );
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelControl = new javax.swing.JPanel();
        slideRight = new javax.swing.JSlider();
        slideLeft = new javax.swing.JSlider();
        comboRobot = new javax.swing.JComboBox();
        buttonStop = new javax.swing.JButton();
        buttonBatt = new javax.swing.JButton();
        buttonBip = new javax.swing.JButton();
        textProgramName = new javax.swing.JTextField();
        textServerIp = new javax.swing.JTextField();
        textServerPort = new javax.swing.JTextField();
        buttonConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        checkboxReverseLeft = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        checkboxReverseRight = new javax.swing.JCheckBox();
        checkboxRun = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(null);

        panelControl.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelControl.setOpaque(false);
        panelControl.setLayout(null);
        jPanel1.add(panelControl);
        panelControl.setBounds(80, 20, 200, 200);

        slideRight.setMinimum(-100);
        slideRight.setOrientation(javax.swing.JSlider.VERTICAL);
        slideRight.setValue(0);
        slideRight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideRightStateChanged(evt);
            }
        });
        jPanel1.add(slideRight);
        slideRight.setBounds(280, 20, 30, 200);

        slideLeft.setMinimum(-100);
        slideLeft.setOrientation(javax.swing.JSlider.VERTICAL);
        slideLeft.setValue(0);
        slideLeft.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideLeftStateChanged(evt);
            }
        });
        jPanel1.add(slideLeft);
        slideLeft.setBounds(50, 20, 30, 200);

        comboRobot.setEditable(true);
        comboRobot.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "00:16:53:0A:30:51", "00:16:53:0A:75:F3", "00:16:53:03:01:25", "ALL" }));
        jPanel1.add(comboRobot);
        comboRobot.setBounds(80, 400, 200, 27);

        buttonStop.setText("Stop");
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });
        jPanel1.add(buttonStop);
        buttonStop.setBounds(80, 270, 67, 29);

        buttonBatt.setText("Batt");
        buttonBatt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGetBatteryPerformed(evt);
            }
        });
        jPanel1.add(buttonBatt);
        buttonBatt.setBounds(145, 270, 67, 29);

        
        buttonBip.setText("Bip!");
        buttonBip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBipActionPerformed(evt);
            }
        });
        jPanel1.add(buttonBip);
        buttonBip.setBounds(210, 270, 67, 29);
        jPanel1.add(textProgramName);
        textProgramName.setBounds(80, 330, 180, 27);

        textServerIp.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textServerIp.setText("127.0.0.1");
        jPanel1.add(textServerIp);
        textServerIp.setBounds(330, 40, 120, 27);

        textServerPort.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        textServerPort.setText("1234");
        jPanel1.add(textServerPort);
        textServerPort.setBounds(330, 90, 120, 27);

        buttonConnect.setText("Connect");
        buttonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnectActionPerformed(evt);
            }
        });
        jPanel1.add(buttonConnect);
        buttonConnect.setBounds(345, 120, 90, 29);

        jLabel1.setText("Server IP");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(330, 20, 120, 17);

        jLabel2.setText("Server Port");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(330, 70, 120, 17);

        checkboxReverseLeft.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkboxReverseLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxReverseLeftActionPerformed(evt);
            }
        });
        jPanel1.add(checkboxReverseLeft);
        checkboxReverseLeft.setBounds(60, 230, 18, 18);

        jLabel3.setText("Reverse");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(150, 230, 80, 17);

        checkboxReverseRight.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkboxReverseRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxReverseRightActionPerformed(evt);
            }
        });
        jPanel1.add(checkboxReverseRight);
        checkboxReverseRight.setBounds(280, 230, 20, 18);

        checkboxRun.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        checkboxRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkboxRunActionPerformed(evt);
            }
        });
        jPanel1.add(checkboxRun);
        checkboxRun.setBounds(270, 330, 20, 18);

        jLabel4.setText("Run Program");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(80, 310, 180, 17);

        jLabel5.setText("Robot:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(80, 380, 200, 17);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void checkboxReverseRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxReverseRightActionPerformed
        if (checkboxReverseRight.isSelected()) {
            reverseRight=-1;
        } else {
            reverseRight=1;
        }
    }//GEN-LAST:event_checkboxReverseRightActionPerformed
    
    private void checkboxReverseLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxReverseLeftActionPerformed
        if (checkboxReverseLeft.isSelected()) {
            reverseLeft=-1;
        } else {
            reverseLeft=1;
        }
    }//GEN-LAST:event_checkboxReverseLeftActionPerformed
    
    private void checkboxRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkboxRunActionPerformed
        if (checkboxRun.isSelected()) {
            Sender.send(Commands.getStartProgram(comboRobot.getSelectedItem().toString(),textProgramName.getText()));
        } else {
            Sender.send(Commands.getStopProgram(comboRobot.getSelectedItem().toString()));
        }
    }//GEN-LAST:event_checkboxRunActionPerformed
    
    private void buttonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnectActionPerformed
        Sender.setServer(textServerIp.getText() , Integer.parseInt(textServerPort.getText()) );
    }//GEN-LAST:event_buttonConnectActionPerformed
    
    private void buttonBipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBipActionPerformed
        Sender.send(Commands.getBeep(comboRobot.getSelectedItem().toString()));
    }//GEN-LAST:event_buttonBipActionPerformed
    
    private void buttonGetBatteryPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        Sender.send(Commands.getBatteryLevel(comboRobot.getSelectedItem().toString()));
    }//GEN-LAST:event_buttonGetBatteryPerformed

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        Sender.send(Commands.getAllMotorStop(comboRobot.getSelectedItem().toString()));
        x1 = 100;
        y1 = 100;
        dragging=true;
        remoteMoved();
        dragging=false;
        
    }//GEN-LAST:event_buttonStopActionPerformed
    private void slideRightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideRightStateChanged
        //System.out.println(Commands.getMotorOutput(comboRobot.getSelectedItem().toString(),
        //       Commands.NXT_MOTOR_B, reverseRight *slideRight.getValue()));
        Sender.send(Commands.getMotorOutput(comboRobot.getSelectedItem().toString(),
                Commands.NXT_MOTOR_B, reverseRight *slideRight.getValue()));
        slideMoved();
    }//GEN-LAST:event_slideRightStateChanged
    
    private void slideLeftStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideLeftStateChanged
        Sender.send(Commands.getMotorOutput( comboRobot.getSelectedItem().toString(),
                Commands.NXT_MOTOR_A, reverseLeft *slideLeft.getValue()));
        slideMoved();
    }//GEN-LAST:event_slideLeftStateChanged
    
    private void slideMoved() {
        if (!dragging) {
            int a=slideLeft.getValue();
            int b=slideRight.getValue();
            x1=100+(a-b)/2;
            y1=100-(a+b)/2;
            remoteMoved();
        }
    }
    public void mousePressed(MouseEvent evt) {
        // Respond when the user presses the mouse on the panel.
        // Check which square the user clicked, if any, and start
        // dragging that square.
        
        if (dragging)  // Exit if a drag is already in progress.
            return;
        
        x1 = evt.getX();  // Location where user clicked.
        y1 = evt.getY();
        
        dragging = true;
        
    }
    
    private void remoteMoved() {
        if (x1>200) x1=200;
        else if (x1<0) x1=0;
        if (y1>200) y1=200;
        else if (y1<0) y1=0;
        
        if (dragging) {
            int x=x1-100;
            int y=100-y1;
            slideLeft.setValue(x+y);
            slideRight.setValue(y-x);
        }
        drawSurface.repaint();
    }
    
    public void mouseReleased(MouseEvent evt) {
        // Dragging stops when user releases the mouse button.
        x1 = 100;
        y1 = 100;
        remoteMoved();
        dragging = false;
    }
    
    
    public void mouseDragged(MouseEvent evt) {
        // Respond when the user drags the mouse.  If a square is
        // not being dragged, then exit. Otherwise, change the position
        // of the square that is being dragged to match the position
        // of the mouse.  Note that the corner of the square is placed
        // in the same position with respect to the mouse that it had
        // when the user started dragging it.
        if (dragging == false)
            return;
        x1 = evt.getX();
        y1 = evt.getY();
        remoteMoved();
    }
    
    
    public void mouseMoved(MouseEvent evt) { }
    public void mouseClicked(MouseEvent evt) { }
    public void mouseEntered(MouseEvent evt) { }
    public void mouseExited(MouseEvent evt) { }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Remote().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBip;
    private javax.swing.JButton buttonConnect;
    private javax.swing.JButton buttonStop;
    private javax.swing.JButton buttonBatt;
    private javax.swing.JCheckBox checkboxReverseLeft;
    private javax.swing.JCheckBox checkboxReverseRight;
    private javax.swing.JCheckBox checkboxRun;
    private javax.swing.JComboBox comboRobot;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelControl;
    private javax.swing.JSlider slideLeft;
    private javax.swing.JSlider slideRight;
    private javax.swing.JTextField textProgramName;
    private javax.swing.JTextField textServerIp;
    private javax.swing.JTextField textServerPort;
    // End of variables declaration//GEN-END:variables
    
}
